import { showToast } from '@/components/ui/toastify';
import axios, {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse,
  InternalAxiosRequestConfig,
} from 'axios';// ƒë√£ c√≥
import Cookies from 'js-cookie'
import jwt from 'jsonwebtoken';
import { addHours, differenceInMinutes } from 'date-fns';
import { authService } from '@/services/authService';
import { useLogout } from '@/hooks/useLogout';
import { ROUTES } from '@/constants/route';
import { getStore } from '@/store/store';

// Constants
const TOKEN_CHECK_INTERVAL = 300000; // 5 minutes
const TOKEN_REFRESH_THRESHOLD = 7; // minutes
const MAX_REFRESH_RETRIES = 3;

// Types
interface DecodedToken {
  exp?: number;
  iat?: number;
  sub?: string;
}

// Token refresh state
let isRefreshing = false;
let failedQueue: any[] = [];
let refreshPromise: Promise<void> | null = null;

const processQueue = (error: any = null, token: string | null = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

const refreshTokenWithRetry = async (retries = MAX_REFRESH_RETRIES) => {
  for (let i = 0; i < retries; i++) {
    try {
      await authService.refreshToken();
      return true;
    } catch (error) {
      if (i === retries - 1) throw error;
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
    }
  }
  return false;
};

const refreshToken = async (): Promise<void> => {
  if (refreshPromise) {
    return refreshPromise;
  }
  
  refreshPromise = refreshTokenWithRetry()
    .then(() => {}) // Convert Promise<boolean> to Promise<void>
    .finally(() => {
      refreshPromise = null;
    });
    
  return refreshPromise;
};

// ==================== PUBLIC AXIOS (Truy·ªÅn csrf-token v√†o header) ====================

export const publicAxios = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
  withCredentials: true, // üîí R·∫•t quan tr·ªçng ƒë·ªÉ cookie ƒëi theo request
})

// Request Interceptor ‚Üí G·∫Øn x-csrf-token
publicAxios.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    if (typeof window !== 'undefined') {
      const csrfToken = Cookies.get('xsrf-token');
      if (csrfToken && config.headers) {
        config.headers['x-csrf-token'] = csrfToken;
      }
      // Inject Accept-Language from Redux
      const store = getStore();
      const lang = store.store.getState().langShopsifu?.language || 'vi';
      if (config.headers) {
        config.headers['Accept-Language'] = lang;
      }
    }
    return config;
  },
  (error) => Promise.reject(error)
)

// Response Interceptor (optional)
publicAxios.interceptors.response.use(
  (response: AxiosResponse) => {
    return response
  },
  (error) => {
    console.error('‚ùå publicAxios error:', error)
    return Promise.reject(error)
  }
)
// ==================== REFRESH AXIOS (Th√™m access token v√† x·ª≠ l√Ω l·ªói 401) ====================
export const refreshAxios = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
  withCredentials: true,
  headers: { 
    "Content-Type": "application/json",
    "Accept": "application/json",
   },
});

refreshAxios.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    if (typeof window !== 'undefined') {
      const csrfToken = Cookies.get('xsrf-token');
      if (csrfToken && config.headers) {
        config.headers['x-csrf-token'] = csrfToken;
      }
      // Inject Accept-Language from Redux
      const store = getStore();
      const lang = store.store.getState().langShopsifu?.language || 'vi';
      if (config.headers) {
        config.headers['Accept-Language'] = lang;
      }
    }
    return config;
  },
  (error) => Promise.reject(error)
)


// ==================== PRIVATE AXIOS (Th√™m access token v√† x·ª≠ l√Ω l·ªói 401) ====================

// export const privateAxios = axios.create({
//   baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
//   withCredentials: true,
// })

// // Request Interceptor ‚Üí G·∫Øn access token v√† csrf token
// privateAxios.interceptors.request.use(
//   (config: InternalAxiosRequestConfig) => {
//     if (typeof window !== 'undefined') {
//       const csrfToken = Cookies.get('xsrf-token')

//       if (csrfToken && config.headers) {
//         config.headers['x-csrf-token'] = csrfToken
//       }
//     }

//     return config
//   },
//   (error) => Promise.reject(error)
// )

// // Response Interceptor ‚Üí X·ª≠ l√Ω l·ªói 401
// privateAxios.interceptors.response.use(
//   (response: AxiosResponse) => {
//     return response
//   },
//   (error: AxiosError) => {
//     if (error.response?.status === 401) {
//       showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p t√†i kho·∫£n', 'info')
//       window.location.href = '/buyer/sign-in' 
//     }
//     return Promise.reject(error)
//   }
// )


// H√†m ki·ªÉm tra th·ªùi gian c√≤n l·∫°i c·ªßa token
const getTokenTimeLeft = (expTimestamp: number): number => {
  try {
    // Chuy·ªÉn timestamp (gi√¢y) th√†nh Date object (UTC)
    const expirationDate = new Date(expTimestamp * 1000);
    const utcPlus7 = addHours(expirationDate, 7); // Chuy·ªÉn sang UTC+7

    // L·∫•y th·ªùi gian hi·ªán t·∫°i v√† chuy·ªÉn sang UTC+7
    const now = new Date();
    const nowUtcPlus7 = addHours(now, 7);

    // T√≠nh ch√™nh l·ªách th·ªùi gian theo ph√∫t
    const timeDiffInMinutes = differenceInMinutes(utcPlus7, nowUtcPlus7);

    console.log(`Th·ªùi gian h·∫øt h·∫°n (UTC+7): ${utcPlus7.toISOString()}`);
    console.log(`Th·ªùi gian hi·ªán t·∫°i (UTC+7): ${nowUtcPlus7.toISOString()}`);
    console.log(`Ch√™nh l·ªách th·ªùi gian c√≤n l·∫°i: ${timeDiffInMinutes} ph√∫t`);

    return timeDiffInMinutes;
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n token:', error);
    return -1; // Tr·∫£ v·ªÅ -1 n·∫øu c√≥ l·ªói
  }
};


// T·∫°o instance privateAxios
export const privateAxios = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
  withCredentials: true,
});

// Request Interceptor ‚Üí Ch·ªâ g·∫Øn x-csrf-token
privateAxios.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    if (typeof window !== 'undefined') {
      const csrfToken = Cookies.get('xsrf-token');
      const sltToken = Cookies.get('slt_token');
      console.log("sessionToken: ", sltToken)
      if (csrfToken && config.headers) {
        config.headers['x-csrf-token'] = csrfToken;
      }
      // Inject Accept-Language from Redux
      const store = getStore();
      const lang = store.store.getState().langShopsifu?.language || 'vi';
      if (config.headers) {
        config.headers['Accept-Language'] = lang;
      }
    }
    return config;
  },
  (error) => Promise.reject(error)
);


// Response Interceptor ‚Üí X·ª≠ l√Ω l·ªói 401
privateAxios.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error: AxiosError) => {
    if (error.response?.status === 401) {
      console.log('Token b·ªã v√¥ hi·ªáu h√≥a ho·∫∑c kh√¥ng h·ª£p l·ªá:', error.response?.data);
      showToast('B·∫°n ƒë√£ h·∫øt phi√™n ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i', 'info');
      window.location.href = ROUTES.BUYER.SIGNIN;
    }
    return Promise.reject(error);
  }
);

// Token check function
const checkToken = async () => {
  const accessToken = Cookies.get('access_token');
  if (!accessToken) {
    console.warn('Kh√¥ng t√¨m th·∫•y access token');
    return;
  }

  try {
    const decodedToken = jwt.decode(accessToken) as DecodedToken;
    if (!decodedToken?.exp) {
      console.warn('Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tr∆∞·ªùng exp');
      return;
    }

    const timeLeftInMinutes = getTokenTimeLeft(decodedToken.exp);
    
    if (timeLeftInMinutes < 0) {
      console.warn('Token ƒë√£ h·∫øt h·∫°n');
      window.location.href = ROUTES.BUYER.SIGNIN;
      return;
    }

    if (timeLeftInMinutes <= TOKEN_REFRESH_THRESHOLD) {
      try {
        await refreshToken();
        console.log('‚úÖ Token refreshed successfully');
      } catch (error) {
        console.error('‚ùå Failed to refresh token:', error);
        window.location.href = ROUTES.BUYER.SIGNIN;
      }
    } else {
      console.log(`Token c√≤n ${timeLeftInMinutes} ph√∫t`);
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra token:', error);
  }
};

// Interval management
let tokenCheckInterval: NodeJS.Timeout;

const startTokenCheck = () => {
  console.log('B·∫Øt ƒë·∫ßu ki·ªÉm tra access_token');
  if (typeof window !== 'undefined') {
    if (tokenCheckInterval) {
      clearInterval(tokenCheckInterval);
    }
    
    // Check immediately on start
    checkToken();
    
    tokenCheckInterval = setInterval(checkToken, TOKEN_CHECK_INTERVAL);
  }
};

const stopTokenCheck = () => {
  if (tokenCheckInterval) {
    clearInterval(tokenCheckInterval);
  }
};

// Initialize token check
if (typeof window !== 'undefined') {
  startTokenCheck();
  window.addEventListener('beforeunload', stopTokenCheck);
}